This release was boot tested on RTSM A15x4 and A15x4-A7x4 models. No rigorous testing was carried out. This build is expected to run on other RTSM models.

h2. Prerequisites

* Install the RTSM model(s) you wish to run. You must have a valid license and the environment set up to run models
* Install "Linaro image tools":https://wiki.linaro.org/Linaro-Image-Tools
* Install kpartx which you can get by issuing the following command in your terminal

bc. sudo apt-get install kpartx

Linaro Ubuntu images are made up of two components. The "Hardware Pack":https://wiki.linaro.org/HardwarePacks, which contains the kernel, boot loader and/or Device Tree blob and a Root file system (RootFS) of your choice to generate an image.

The root file systems are described "here":http://releases.linaro.org/13.06/ubuntu/raring-images where you can also download them.

h3. Install Linaro Image Tools

There are multiple ways you can get the latest Linaro Image Tools:

** Method 1: Install them from the Linaro Image Tools "PPA":https://launchpad.net/~linaro-maintainers/+archive/tools

bc. sudo add-apt-repository ppa:linaro-maintainers/tools
sudo apt-get update
sudo apt-get install linaro-image-tools

** Method 2: Building from source

bc. wget http://releases.linaro.org/13.06/components/platform/linaro-image-tools/linaro-image-tools-2013.06.tar.gz

h2. Create a 2GB image file

RTSM will only deal with file systems up to 2GB in size, however the released pre-built image for Ubuntu Desktop requires a 4GB filesystem.  Therefore we will build our own Nano image using the pre-built artifacts as listed below.

We use a "Nano":http://releases.linaro.org/13.06/ubuntu/raring-images RootFS for this example, however, you could use other RootFS types such as ALIP or Developer so long as you can install it to a 2GB file (Ubuntu Desktop doesn't fit the 2GB limit).

Using the following command, you will download the RootFS, the hardware pack.

bc. wget http://releases.linaro.org/13.06/ubuntu/vexpress/hwpack_linaro-vexpress_20130625-379_armhf_supported.tar.gz
wget https://releases.linaro.org/13.06/ubuntu/vexpress/linaro-raring-developer-20130623-410.tar.gz

Now you need to create the image using the following commands.

bc. linaro-media-create --image-file linaro.img --image-size 2000M --dev vexpress --hwpack hwpack_linaro-vexpress_20130625-379_armhf_supported.tar.gz --binary linaro-raring-developer-20130623-410.tar.gz

bc. sudo kpartx -a linaro.img
mkdir boot
sudo mount /dev/mapper/loop0p1 boot
cp boot/uImage .
cp boot/uInitrd .
cp -ar boot/rtsm rtsm
sudo umount boot
sudo kpartx -d linaro.img

note: unless you use kpartx to delete the loop mappings as above, even if you update linaro.img and re-mount it, it will not refresh and you will end up using the old image.

h2. Run RTSM with UEFI

The instructions for running UEFI on the various models are very similar.  The two differences are the UEFI binary and the model used.  Follow the model specific instruction below, then proceed to the generic instructions in the section "Run the model with UEFI".

h3. Run A9x4 model with UEFI

bc. RTSM_MODEL=/usr/local/DS-5/bin/RTSM_VE_Cortex-A9_MPx4
RTSM_UEFI=rtsm/uefi_rtsm_ve-ca9x4.bin

h3. Run A15x1 model with UEFI

bc. RTSM_MODEL=$HOME/ARM/RTSM/Linux64_RTSM_VE_Cortex-A15x1/RTSM_VE_Cortex-A15x1
RTSM_UEFI=rtsm/uefi_rtsm_ve-ca15.bin

h3. Run A15x2 model with UEFI

bc. RTSM_MODEL=$HOME/ARM/RTSM/Linux64_RTSM_VE_Cortex-A15x2/RTSM_VE_Cortex-A15x2
RTSM_UEFI=rtsm/uefi_rtsm_ve-ca15.bin

h3. Run A15x4 model with UEFI

bc. RTSM_MODEL=$HOME/ARM/RTSM/Linux64_RTSM_VE_Cortex-A15x4/RTSM_VE_Cortex-A15x4
RTSM_UEFI=rtsm/uefi_rtsm_ve-ca15.bin

h3. Run the model with UEFI

bc. RTSM_MMC=linaro.img
RTSM_UEFI_VARS=$HOME/uefi-vars.fd

bc. $RTSM_MODEL \
-C motherboard.flashloader0.fname=$RTSM_UEFI \
-C motherboard.flashloader1.fname=$RTSM_UEFI_VARS \
-C motherboard.flashloader1.fnameWrite=$RTSM_UEFI_VARS \
-C motherboard.mmc.p_mmc_file=$RTSM_MMC \
-C motherboard.pl011_uart0.unbuffered_output=true \
-C motherboard.smsc_91c111.enabled=1 \
-C motherboard.hostbridge.userNetworking=1

h2. Run A15x4 model with the Boot Wrapper

This example shows how to run the Linaro kernel on a quad core A15 RTSM model:

bc. RTSM_MODEL=$HOME/ARM/RTSM/Linux64_RTSM_VE_Cortex-A15x4/RTSM_VE_Cortex-A15x4
RTSM_BOOTWRAPPER=rtsm/linux-system-semi.axf
RTSM_MMC=linaro.img
RTSM_KERNEL=uImage
RTSM_DTB=rtsm/rtsm_ve-ca15x4.dtb
RTSM_INITRD=uInitrd
RTSM_CMDLINE="console=ttyAMA0,115200n8 root=/dev/mmcblk0p2 rootwait ro mem=1024M ip=dhcp"

bc. $RTSM_MODEL \
$RTSM_BOOTWRAPPER \
-C motherboard.smsc_91c111.enabled=1 \
-C motherboard.hostbridge.userNetworking=1 \
-C motherboard.mmc.p_mmc_file="$RTSM_MMC" \
-C cluster.cpu0.semihosting-cmd_line="--kernel $RTSM_KERNEL --dtb $RTSM_DTB --initrd $RTSM_INITRD -- $RTSM_CMDLINE"

h2. Run A15x4-A7x4 model with the Boot Wrapper

This example shows how to run the Linaro kernel on a big.LITTLE RTSM model.  There is no UEFI binary for the big.LITTLE model, so we only use the boot wrapper for this model.

bc. RTSM_MODEL=$HOME/ARM/RTSM/Linux64_RTSM_VE_Cortex-A15x4-A7x4/RTSM_VE_Cortex-A15x4-A7x4
RTSM_BOOTWRAPPER=boot/rtsm/linux-system-semi.axf
RTSM_MMC=linaro.img
RTSM_KERNEL=uImage
RTSM_DTB=rtsm/rtsm_ve-ca15x4-ca7x4.dtb
RTSM_INITRD=uInitrd
RTSM_CMDLINE="console=ttyAMA0,115200n8 root=/dev/mmcblk0p2 rootwait ro mem=1024M ip=dhcp"

bc. $RTSM_MODEL \
-a coretile.cluster0.*=$RTSM_BOOTWRAPPER \
-a coretile.cluster1.*=$RTSM_BOOTWRAPPER \
-C motherboard.smsc_91c111.enabled=1 \
-C motherboard.hostbridge.userNetworking=1 \
-C motherboard.mmc.p_mmc_file=$RTSM_MMC \
-C coretile.dualclustersystemconfigurationblock.CFG_ACTIVECLUSTER=0x3 \
-C coretile.cluster0.cpu0.semihosting-enable=1 \
-C coretile.cluster0.cpu0.semihosting-cmd_line="--kernel $RTSM_KERNEL --dtb $RTSM_DTB --initrd $RTSM_INITRD -- $RTSM_CMDLINE"

